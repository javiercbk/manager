package com.company.manager.repositories;

import java.util.Date;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.AnnotationConfigContextLoader;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.company.manager.configuration.TestConfig;
import com.company.manager.configuration.TestJPAConfiguration;
import com.company.manager.models.Employee;
import com.company.manager.models.Office;
import com.company.manager.utils.RandomGenerator;
import com.company.manager.utils.RandomModelCreator;
import com.google.common.collect.Lists;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = {TestConfig.class, TestJPAConfiguration.class},
	loader=AnnotationConfigContextLoader.class)
@Transactional
public class OfficeRepositoryTest {
	@Autowired
	private OfficeRepository officeRepository;
	@Autowired
	private EmployeeRepository employeeRepository;
	@Autowired
	private TestingRepository testingRepository;
	
	@After
	public void tearDown(){
		//clean the database after test run
		testingRepository.wipeTablesData();
	}
	
	@Test
	@SuppressWarnings("deprecation")
	public void testIdAutogeneration(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setEmployees(Lists.newArrayList());
		office.setLocation("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		Date novemberFirst1800 = new Date();
		novemberFirst1800.setDate(1);
		novemberFirst1800.setMonth(10);
		novemberFirst1800.setYear(1800 - 1900);
		office.setOpened(new Date());
		officeRepository.persist(office);
		Assert.assertNotNull("When persisting an object, and Id should be autogenerated by the database", office.getId());
	}
	
	@Test
	@SuppressWarnings("deprecation")
	public void testSearchSimilar(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setEmployees(Lists.newArrayList());
		office.setLocation("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		Date novemberFirst1800 = new Date();
		novemberFirst1800.setDate(1);
		novemberFirst1800.setMonth(10);
		novemberFirst1800.setYear(1800 - 1900);
		office.setOpened(new Date());
		officeRepository.persist(office);
		List<Office> randomOffices = RandomModelCreator.randomEntities(Office.class, 10);
		int i = 1;
		for(Office randomOffice : randomOffices){
			randomOffice.setId(null);
			randomOffice.setEmployees(Lists.newArrayList());
			randomOffice.setLocation("Random-" + i + " :" + randomOffice.getLocation());
			randomOffice.setCreation(new DateTime());
			randomOffice.setOpened(new Date());
			officeRepository.persist(randomOffice);
			i++;
		}
		List<Office> offices = officeRepository.searchSimilar("16");
		Assert.assertEquals("One office should have been found", 1, offices.size());
		Assert.assertEquals(office.getClosed(), offices.get(0).getClosed());
		Assert.assertEquals(office.getLocation(), offices.get(0).getLocation());
		Assert.assertEquals(office.getCreation(), offices.get(0).getCreation());
		Assert.assertEquals(office.getId(), offices.get(0).getId());
		Assert.assertEquals(office.getOpened(), offices.get(0).getOpened());
		offices = officeRepository.searchSimilar("Non existing");
		Assert.assertEquals("No office should have been found", 0, offices.size());
	}
	
	@Test
	@SuppressWarnings("deprecation")
	public void search(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setEmployees(Lists.newArrayList());
		office.setLocation("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		Date novemberFirst1800 = new Date();
		novemberFirst1800.setDate(1);
		novemberFirst1800.setMonth(10);
		novemberFirst1800.setYear(1800 - 1900);
		office.setOpened(new Date());
		officeRepository.persist(office);
		officeRepository.detach(office);
		office = null;
		office = officeRepository.search("1600 Pennsylvania Ave NW, Washington");
		Assert.assertNull("Office should not have been found", office);
		office = officeRepository.search("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		Assert.assertNotNull("Office should have been found");
	}
	
	@Test
	public void testAll(){
		List<Office> randomOffices = RandomModelCreator.randomEntities(Office.class, 10);
		int i = 1;
		for(Office randomOffice : randomOffices){
			randomOffice.setId(null);
			randomOffice.setEmployees(Lists.newArrayList());
			randomOffice.setLocation("Random-" + i + " :" + randomOffice.getLocation());
			randomOffice.setCreation(new DateTime());
			randomOffice.setOpened(new Date());
			officeRepository.persist(randomOffice);
			i++;
		}
		List<Office> offices = officeRepository.all();
		Assert.assertEquals("All offices should have been found", 10, offices.size());
	}
	
	@Test
	@SuppressWarnings("deprecation")
	public void testEmployeeCascade(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setEmployees(Lists.newArrayList());
		office.setLocation("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		Date novemberFirst1800 = new Date();
		novemberFirst1800.setDate(1);
		novemberFirst1800.setMonth(10);
		novemberFirst1800.setYear(1800 - 1900);
		office.setOpened(new Date());
		officeRepository.persist(office);
		officeRepository.flush();
		officeRepository.detach(office);
		office = officeRepository.reference(office.getId());
		Employee employee = new Employee();
		employee.setCreation(new DateTime());
		employee.setEmail("brian@griffin.com");
		employee.setName("Brian Griffin");
		employee.setPhone("135123-21312321");
		employee.setWorkingSince(new Date());
		employee.setOffice(office);
		employeeRepository.persist(employee);
		employeeRepository.flush();
		Long id = office.getId();
		office = null;
		office = officeRepository.getById(id);
		Assert.assertEquals("Emplooyees amount should match", 1, office.getEmployees().size());
		Assert.assertEquals("Employee id should match", employee.getId(), office.getEmployees().get(0).getId());
		officeRepository.remove(office);
		officeRepository.flush();
		employee = employeeRepository.getById(employee.getId());
		Assert.assertNull("Employee should have been deleted", employee);
	}
	
	@Test(expected=javax.persistence.PersistenceException.class)
	public void testNoLocation(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setEmployees(Lists.newArrayList());
		office.setOpened(new Date());
		officeRepository.persist(office);
	}
	
	@Test(expected=javax.persistence.PersistenceException.class)
	public void testNoOpenedDate(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setLocation("1600 Pennsylvania Ave NW, Washington, DC 20500, US");
		office.setEmployees(Lists.newArrayList());
		officeRepository.persist(office);
	}
	
	@Test(expected=javax.persistence.PersistenceException.class)
	public void testTooLongLocation(){
		Office office = new Office();
		office.setCreation(new DateTime());
		office.setLocation(RandomGenerator.randomString(105));
		office.setEmployees(Lists.newArrayList());
		office.setOpened(new Date());
		officeRepository.persist(office);
	}
}
