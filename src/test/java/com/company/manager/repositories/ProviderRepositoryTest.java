package com.company.manager.repositories;

import java.util.List;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.AnnotationConfigContextLoader;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.company.manager.configuration.TestConfig;
import com.company.manager.configuration.TestJPAConfiguration;
import com.company.manager.models.Client;
import com.company.manager.models.Provider;
import com.company.manager.utils.RandomGenerator;
import com.company.manager.utils.RandomModelCreator;
import com.google.common.collect.Lists;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = {TestConfig.class, TestJPAConfiguration.class},
	loader=AnnotationConfigContextLoader.class)
@Transactional
public class ProviderRepositoryTest {
	@Autowired
	private ProviderRepository providerRepository;
	@Autowired
	private ClientRepository clientRepository;
	@Autowired
	private TestingRepository testingRepository;
	
	@After
	public void tearDown(){
		//clean the database after test run
		testingRepository.wipeTablesData();
	}
	
	@Test
	public void testIdAutogeneration(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		provider.setName("Proven Provider");
		providerRepository.persist(provider);
		Assert.assertNotNull("When persisting an object, and Id should be autogenerated by the database", provider.getId());
	}
	
	@Test
	public void testSearchSimilar(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		provider.setName("Proven Provider");
		providerRepository.persist(provider);
		List<Provider> randomProviders = RandomModelCreator.randomEntities(Provider.class, 10);
		int i = 1;
		for(Provider randomProvider : randomProviders){
			randomProvider.setId(null);
			randomProvider.setName("Random-" + i + " :" + randomProvider.getName());
			randomProvider.setCreation(new DateTime());
			providerRepository.persist(randomProvider);
			i++;
		}
		List<Provider> providers = providerRepository.searchSimilar("Pro");
		Assert.assertEquals("One provider should have been found", 1, providers.size());
		Assert.assertEquals(provider.getName(), providers.get(0).getName());
		Assert.assertEquals(provider.getCreation(), providers.get(0).getCreation());
		Assert.assertEquals(provider.getId(), providers.get(0).getId());
		providers = providerRepository.searchSimilar("Non existing");
		Assert.assertEquals("No provider should have been found", 0, providers.size());
	}
	
	@Test
	public void search(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		provider.setName("Proven Provider");
		providerRepository.persist(provider);
		providerRepository.detach(provider);
		provider = null;
		provider = providerRepository.search("Flimsy Provider");
		Assert.assertNull("Provider should not have been found", provider);
		provider = providerRepository.search("Proven Provider");
		Assert.assertNotNull("Provider should have been found");
	}
	
	@Test
	public void testAll(){
		List<Provider> randomProviders = RandomModelCreator.randomEntities(Provider.class, 10);
		int i = 1;
		for(Provider randomProvider : randomProviders){
			randomProvider.setId(null);
			randomProvider.setName("Random-" + i + " :" + randomProvider.getName());
			randomProvider.setCreation(new DateTime());
			providerRepository.persist(randomProvider);
			i++;
		}
		List<Provider> providers = providerRepository.all();
		Assert.assertEquals("All providers should have been found", 10, providers.size());
	}
	
	@Test
	public void testClientCascade(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		provider.setName("Proven Provider");
		providerRepository.persist(provider);
		Client newClient = new Client();
		newClient.setCreation(new DateTime());
		newClient.setEmail("brian@griffin.com");
		newClient.setName("Brian Griffin");
		newClient.setPhone("542-1235");
		newClient.setProviders(Lists.newArrayList(provider));
		clientRepository.persist(newClient);
		clientRepository.flush();
		clientRepository.detach(newClient);
		providerRepository.detach(provider);
		Long providerId = provider.getId();
		Long clientId = newClient.getId();
		newClient = null;
		provider = null;
		provider = providerRepository.getById(providerId);
		Assert.assertEquals("Client's size should match", 1 , provider.getClients().size());
		providerRepository.remove(provider);
		providerRepository.flush();
		newClient = clientRepository.getById(clientId);
		Assert.assertNotNull("Client should not have been deleted", newClient);
		Assert.assertEquals("Provider's size should match", 0 , newClient.getProviders().size());
	}
	
	@Test(expected=javax.persistence.PersistenceException.class)
	public void testNoName(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		providerRepository.persist(provider);
	}
	
	@Test(expected=javax.persistence.PersistenceException.class)
	public void testTooLongName(){
		Provider provider = new Provider();
		provider.setCreation(new DateTime());
		provider.setName(RandomGenerator.randomString(105));
		providerRepository.persist(provider);
	}
}
